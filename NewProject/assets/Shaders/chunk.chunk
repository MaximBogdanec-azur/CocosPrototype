// you can write GLSL code directly in here

#include <builtin/uniforms/cc-global>

#define iResolution cc_screenSize
#define iTime cc_time.x
#define iTimeDelta cc_time.y
#define iFrame cc_time.z

vec2 _uvColor = vec2(0.0);
float _radiusCircle = .48;
float _glow = 0.003;
float _linesCount = 15.0;

vec3 colorPalette(float t)
{
    vec3 a = vec3(1.5, 1.5, 1.5);
    vec3 b = vec3(-0.5, 0.5, 0.5);
    vec3 c = vec3(0.5, 0.5, 0.5);
    vec3 d = vec3(-0.5, 0.5, 0.5);
    
    return a + b*cos( 6.28318*(c*t+d) );
}

float circle(vec2 p, float r)
{
    return length(p) - r;
}

void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    vec2 uv = (fragCoord *  2.  - iResolution.xy) / iResolution.y;
    vec3 finalColor = vec3(0.);

    for(float i = .0; i < _linesCount; i++)
    {
        float f1 = 1. + 1. * smoothstep(.1, -.4, sin((uv.x + uv.y * i / 4.5) + iTime));

        float newCircles = circle(uv, f1 * _radiusCircle);
        
        newCircles = pow( abs(_glow / newCircles), 2.2) + smoothstep(0.2,0.,abs(newCircles)/fwidth(newCircles) );
        //newCircles = pow(_glow / abs(newCircles), 2.2);
        
        vec3 color = colorPalette(circle(_uvColor, f1));
        finalColor += color * newCircles;
    }
    
    fragColor = vec4(finalColor, 1.);
}